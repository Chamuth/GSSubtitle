<Window x:Class="GSSubtitle.Windows.Editor.Editor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:GSSubtitle.Windows.Editor"
        xmlns:models="clr-namespace:GSSubtitle.Models"
        xmlns:urp="clr-namespace:GSSubtitle.Controllers.UnReDoPattern"
        xmlns:valueconverters="clr-namespace:GSSubtitle.Tools.SubtitleTools.ValueConverters"
        mc:Ignorable="d"
        xmlns:extended="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="Editor" Height="439.369" Width="868" x:Name="editor" Initialized="editor_Initialized" Closed="editor_Closed">
    <!--setting data context of the window-->
    <Window.DataContext>
        <models:Subtitle/>
    </Window.DataContext>

    <!--very needed resources(like value converters)-->
    <Window.Resources>
        <!--value converters-->
        <valueconverters:LineTimeToStringConverter x:Key="LineTimeToStringConverter"/>
        <valueconverters:IntToManagedStringConverter x:Key="InttoManagedIntegerConverter"/>
        <valueconverters:errorTextToBrushConverter x:Key="ErrorTextToColor"/>
        <valueconverters:BoolToVisibleConverter x:Key="BoolToVisible"/>
        <!--multiValueConverters-->
        <valueconverters:BindingBrakedLinesConverter x:Key="TextWithLineBrakes"/>
        <valueconverters:OverlapToErrorTextConverter x:Key="OverLapToErrorText"/>
        <valueconverters:TwoBoolToVisibilityConverter x:Key="TwoBoolToVisible"/>

        <Storyboard x:Key="playerImageAnimation">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="playerImage">
                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

    </Window.Resources>

    <Grid x:Name="baseContainer">
        <Menu x:Name="mainMenu" Height="20" VerticalAlignment="Top">
            <MenuItem Header="File">
                <MenuItem x:Name="openfileMenuitem" Header="Open" Click="openfileMenuitem_Click">
                    <MenuItem.Icon>
                        <Image Source="/Images/File.png" Width="18" Height="18"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Edit">
                <MenuItem Header="Undo" InputGestureText="Ctrl+Z" Command="{x:Static local:Editor_Commands.UndoCommand}" ToolTip="{Binding Path=(urp:URD.NextUndoDescription)}" />
                <MenuItem Header="Redo" InputGestureText="Ctrl+Y" Command="{x:Static local:Editor_Commands.RedoCommand}" ToolTip="{Binding Path=(urp:URD.NextRedoDescription)}"/>
            </MenuItem>
        </Menu>
        <ToolBar x:Name="mainToolbar" Margin="-3,19,0,0" VerticalAlignment="Top" Height="25">
            <Image Source="/Images/New.png" Width="20" Height="20" ToolTip="new subtitle"/>
            <Separator/>
        </ToolBar>
        <Grid x:Name="mainGrid" Margin="0,44,0,16">
            <!--this grid have tree rows-->
            <Grid.RowDefinitions>
                <RowDefinition Height="53*"/>
                <RowDefinition Height="6"/>
                <RowDefinition Height="72*"/>
            </Grid.RowDefinitions>
            <!--main list view-->
            <ListView x:Name="mainListView" Grid.Row="0" ItemsSource="{Binding Path=Lines,Mode=TwoWay}" SelectionChanged="mainListView_SelectionChanged" FontFamily="Microsoft JhengHei" ContextMenuOpening="mainListView_ContextMenuOpening" ContextMenuClosing="mainListView_ContextMenuClosing">
                <ListView.View>
                    <GridView>
                        <GridViewColumn x:Name="lineNumberColumb" Header="Line" Width="50" DisplayMemberBinding="{Binding Path=LineNumber}"/>
                        <GridViewColumn x:Name="startLineColumn" Header="Start Time" Width="100" DisplayMemberBinding="{Binding Path=StartTime,Converter={StaticResource LineTimeToStringConverter}}"/>
                        <GridViewColumn x:Name="endTimecolumn" Header="End Time" Width="100" DisplayMemberBinding="{Binding EndTime,Converter={StaticResource LineTimeToStringConverter}}"/>
                        <GridViewColumn x:Name="durationcolumn" Header="Duration" Width="50" DisplayMemberBinding="{Binding Duration}"/>
                        <GridViewColumn x:Name="textColumn" Header="Text" Width="150" DisplayMemberBinding="{Binding Context}"/>
                        <GridViewColumn x:Name="originalTextColumn" Header="Original Text" Width="150" DisplayMemberBinding="{Binding ConstantContext}"/>
                    </GridView>
                </ListView.View>
                <ListView.ContextMenu >

                    <!--main ListView context menu-->
                    <ContextMenu x:Name="mainListViewContextMenu"  >
                        <MenuItem x:Name="addLineMenuItem" Command="{x:Static local:Editor_Commands.AddLine}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}" />
                        <MenuItem Command="{x:Static local:Editor_Commands.InsertLine}" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}" >
                            <MenuItem  x:Name="insertBeforeCurrentLineMenuItem" Command="{x:Static local:Editor_Commands.InsetLineBeforeCurrentLine}" />
                            <MenuItem  x:Name="insertAfterCurrentLineMenuItem" Command="{x:Static local:Editor_Commands.InsetLineAfterCurrentLine}" />
                        </MenuItem>
                        <MenuItem x:Name="deletelineMenuItem" Command="{x:Static local:Editor_Commands.DeleteLines}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem  Command="{x:Static local:Editor_Commands.TextMenuItemCommand}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}">
                            <MenuItem x:Name="deleteTextMenuItem" Command="{x:Static local:Editor_Commands.ClearTextCommand}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="clearoriginaltextMenuItem" Command="{x:Static local:Editor_Commands.CLearOriginalTextCommand}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="copyToClipboardMenuItem" Command="{x:Static local:Editor_Commands.CopyTextToClipboard}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="fromClipboardMenuItem" Command="{x:Static local:Editor_Commands.PasteTextFromClipboardCommand}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}" />
                            <MenuItem x:Name="setAsOriginalTextMenuItem" Command="{x:Static local:Editor_Commands.SetTextAsOriginalText}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="restoreOriginalTextMenuItem" Command="{x:Static local:Editor_Commands.SetOriginalTextAsTextCommand}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="suncoriginaltextandtextMenuItem" Command="{x:Static local:Editor_Commands.SyncOriginalTextAndText}" Visibility="{Binding IsEnabled ,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        </MenuItem>
                        <MenuItem x:Name="splitMenuItem" Command="{x:Static local:Editor_Commands.SplitLSelectedLinesCommand}" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem x:Name="margemenuitem" Command="{x:Static local:Editor_Commands.Marge}" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <Separator/>
                        <MenuItem x:Name="normalMenuItem_LV" Command="{x:Static local:Editor_Commands.NormalText}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem x:Name="boldTextMLVMenuItem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="b" Header="Bold" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem x:Name="italicMLVMenuItem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand }" CommandParameter="i" Header="Italic" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem x:Name="fontMLVMenuIem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="font" Header="Font" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem x:Name="fontcolorMLVMenuItem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="fontcolor" Header="Font Color" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                        <MenuItem x:Name="surroundwithMLVMenuItem" Command="{x:Static local:Editor_Commands.SurroundWithSpecialCharCommand}" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}" />
                        <MenuItem x:Name="alignmentMLVMenuItem" Header="Alignment">
                            <MenuItem Header="Left" >
                                <MenuItem Header="Top" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="TL" />
                                <MenuItem Header="Middle" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="ML"/>
                                <MenuItem Header="Bottom" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="BL"/>
                            </MenuItem>
                            <MenuItem Header="Center">
                                <MenuItem Header="Top" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="TC" />
                                <MenuItem Header="Middle" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="MC"/>
                                <MenuItem Header="Bottom" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="BC"/>
                            </MenuItem>
                            <MenuItem Header="Right" >
                                <MenuItem Header="Top" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="TR" />
                                <MenuItem Header="Middle" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="MR"/>
                                <MenuItem Header="Bottom" Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CommandParameter="BR"/>
                            </MenuItem>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="Effects">
                            <MenuItem Header="Karaoke" Command="{x:Static local:Editor_Commands.KaroakeEffectCommand}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}" />
                            
                        </MenuItem>
                    </ContextMenu>
                </ListView.ContextMenu>

            </ListView>
            <!--main grid splitter(splitting main list view and tools)-->
            <GridSplitter x:Name="mainGridSplitter" HorizontalAlignment="Stretch" Height="6" Grid.Row="1" />
            <!--this grid contains all video player , other needs(toolsetGrid)-->
            <Grid x:Name="toolsetGrid" Grid.Row="2" Background="#FFF7F7F7"  >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="34"/>
                    <ColumnDefinition Width="214*"/>
                    <ColumnDefinition Width="199*" />
                </Grid.ColumnDefinitions>
                <TextBlock Height="22" Margin="5,15,0,0" Text="Text:" VerticalAlignment="Top"/>
                <TextBox x:Name="contextEditor" Grid.Column="1" Height="55"  TextWrapping="Wrap"  VerticalAlignment="Top" Margin="3,20,8,0" AcceptsTab="True" AcceptsReturn="True" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" FontFamily="Microsoft JhengHei">
                    <TextBox.Text>
                        <MultiBinding Converter="{StaticResource TextWithLineBrakes}" UpdateSourceTrigger="PropertyChanged">
                            <Binding  Path="SelectedItem" ElementName="mainListView" Mode="TwoWay" />
                            <Binding  Path="IsChecked" ElementName="autoLineBrackes" Mode="OneWay" />
                            <Binding Path="SelectedItem.Context" ElementName="mainListView" Mode="OneWay"/>
                        </MultiBinding>
                    </TextBox.Text>
                    <TextBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Command="Copy" CommandTarget="{Binding ElementName=contextEditor}"/>
                            <MenuItem Command="Paste" CommandTarget="{Binding ElementName=contextEditor}"/>
                            <MenuItem Command="Cut" CommandTarget="{Binding ElementName=contextEditor}"/>
                            <MenuItem Command="Undo" CommandTarget="{Binding ElementName=contextEditor}"/>
                            <MenuItem Header="Select All" Command="SelectAll"/>
                            <Separator  />
                            <MenuItem x:Name="contexteditornormalmenuitem"   Command="{x:Static local:Editor_Commands.NormalText}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="contexteditorboldmenuitem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="b" Header="Bold" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}" />
                            <MenuItem x:Name="contexteditoritalicmenuitem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="i" Header="Italic" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="contexteditorundelinemenuitem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="u" Header="Underline" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="contexteditorfontmenuitem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="font" Header="Font" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="contexteditorfontcolormenuitem" Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CommandParameter="fontcolor" Header="Font Color" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self},Converter={StaticResource BoolToVisible}}"/>
                            <Separator/>
                            <MenuItem Header="Subscript" x:Name="ContextEditorSubscriptTextMenuItem" Click="ContextEditorSubscriptTextMenuItem_Click"/>
                            <MenuItem Header="Superscript" x:Name="ContextEditorSuperscriptMenuItem" Click="ContextEditorSuperscriptMenuItem_Click"/>
                            <Separator/>
                            <MenuItem x:Name="specialcharacter" Command="{x:Static  local:Editor_Commands.AddSpecialCharacter}" Visibility="{Binding IsEnabled,RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                            <MenuItem x:Name="controlcharacter" Header="Control characters">
                                <MenuItem Header="Right to left" x:Name="rightToLeftControllerCharacterMenuItem" Command="{x:Static local:Editor_Commands.AddControlCharacterCommand}" CommandParameter="RTL" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                                <MenuItem Header="Start of left to right embedding" x:Name="startOfLeftToRightEmbeddingControllerCharacterMenuItem" Command="{x:Static local:Editor_Commands.AddControlCharacterCommand}" CommandParameter="SOLTRE" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                                <MenuItem Header="Start of left to right override" x:Name="startOfLeftTorightOverrrideControlerCharacterMenuItem" Command="{x:Static local:Editor_Commands.AddControlCharacterCommand}" CommandParameter="SOLTRO" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                                <MenuItem Header="Start of right to left embedding" x:Name="startOfRightToLeftEmbeddingControllerCharcterMenuItem" Command="{x:Static local:Editor_Commands.AddControlCharacterCommand}" CommandParameter="SORTLE" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                                <MenuItem Header="Start of right to left override" x:Name="startOfRightToLeftOverrideControllerCharactorMenuItem" Command="{x:Static local:Editor_Commands.AddControlCharacterCommand}" CommandParameter="SORTLO" Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisible}}"/>
                            </MenuItem>


                        </ContextMenu>
                    </TextBox.ContextMenu>
                </TextBox>
                <!--<TextBox x:Name="startTimeEditor" Grid.Column="1" HorizontalAlignment="Left" Height="24" Margin="107,124,0,0" TextWrapping="Wrap" Text="{Binding SelectedItem.StartTime, ElementName=mainListView,Converter={StaticResource LineTimeToStringConverter}}" VerticalAlignment="Top" Width="124"/>-->
                <TextBlock  Grid.Column="1" HorizontalAlignment="Left" Height="19" Margin="13,80,0,0" Text="Start Time :" VerticalAlignment="Top" Width="77"/>
                <Grid Grid.Column="1" Margin="106,97,0,0" HorizontalAlignment="Left" Width="86" Height="21" VerticalAlignment="Top">
                    <TextBox x:Name="durationEditor" HorizontalAlignment="Left" Height="21" TextWrapping="Wrap"  VerticalAlignment="Top" Width="76" Text="{Binding SelectedItem.Duration, ElementName=mainListView, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Button x:Name="durationEditorupbutton" Content="▲" HorizontalAlignment="Left" Height="10" Margin="76,0,0,0" VerticalAlignment="Top" Width="10" FontSize="4" Click="durationEditorupbutton_Click"/>
                    <Button x:Name="durationEditordownbutton" Content="▲" HorizontalAlignment="Left" Height="10" Margin="76,11,0,0" VerticalAlignment="Top" Width="10" RenderTransformOrigin="0.5,0.5" FontSize="4" Click="durationEditordownbutton_Click">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="180"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Button.RenderTransform>
                    </Button>
                </Grid>
                <TextBlock  Grid.Column="1" HorizontalAlignment="Left" Height="16" Margin="108,80,0,0" Text="Duration" VerticalAlignment="Top" Width="54"/>
                <!--<TextBox x:Name="hoursEditor" Grid.Column="1" HorizontalAlignment="Left" Height="21" Margin="10,91,0,0" TextWrapping="Wrap" Text="{Binding SelectedItem.StartTime.Hours, ElementName=mainListView,Converter={StaticResource InttoManagedIntegerConverter},ConverterParameter=10,Mode=TwoWay}" VerticalAlignment="Top" Width="23"/>
                <TextBox x:Name="minutesEditor" Grid.Column="1" HorizontalAlignment="Left" Height="21" Margin="41,91,0,0" TextWrapping="Wrap" Text="{Binding SelectedItem.StartTime.Minutes, ElementName=mainListView,Converter={StaticResource InttoManagedIntegerConverter},ConverterParameter=10,Mode=TwoWay}" VerticalAlignment="Top" Width="23"/>
                <TextBox x:Name="secondsEditor" Grid.Column="1" HorizontalAlignment="Left" Height="21" Margin="72,91,0,0" TextWrapping="Wrap" Text="{Binding SelectedItem.StartTime.Seconds, ElementName=mainListView,Converter={StaticResource InttoManagedIntegerConverter},ConverterParameter=10,Mode=TwoWay}" VerticalAlignment="Top" Width="23"/>
                <TextBox x:Name="millisecodsEditor" Grid.Column="1" HorizontalAlignment="Left" Height="21" Margin="104,91,0,0" TextWrapping="Wrap"  Text="{Binding SelectedItem.StartTime.MilliSeconds, ElementName=mainListView,Converter={StaticResource InttoManagedIntegerConverter},ConverterParameter=100,Mode=TwoWay}" VerticalAlignment="Top" Width="30"/>
                <TextBlock Grid.Column="1" HorizontalAlignment="Left" Height="18" Margin="35,91,0,0" Text=":" VerticalAlignment="Top" Width="4"/>
                <TextBlock Grid.Column="1" HorizontalAlignment="Left" Height="18" Margin="66,91,0,0" Text=":" VerticalAlignment="Top" Width="4"/>
                <TextBlock Grid.Column="1" HorizontalAlignment="Left" Height="18" Margin="98,91,0,0" Text=":" VerticalAlignment="Top" Width="4"/>-->
                <Grid Grid.Column="1" Margin="12,95,0,0" HorizontalAlignment="Left" Width="86" Height="23" VerticalAlignment="Top">
                    <extended:MaskedTextBox x:Name="startTimeEditor" HorizontalAlignment="Left" Margin="0,2,0,0" TextWrapping="Wrap" Text="{Binding SelectedItem.StartTime, Converter={StaticResource LineTimeToStringConverter}, ElementName=mainListView, Mode=TwoWay}" VerticalAlignment="Top" Mask="00:00:00,000" Width="75" Height="21"/>
                    <Button x:Name="startTimeEditorupbutton" Content="▲" HorizontalAlignment="Left" Height="10" Margin="75,2,0,0" VerticalAlignment="Top" Width="10" FontSize="4" Click="startTimeEditorupbutton_Click"/>
                    <Button x:Name="startTimeEditordownbutton" Content="▲" HorizontalAlignment="Left" Height="10" Margin="75,13,0,0" VerticalAlignment="Top" Width="10" FontSize="4" RenderTransformOrigin="0.5,0.5" Click="startTimeEditordownbutton_Click">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="180"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Button.RenderTransform>
                    </Button>
                </Grid>
                <CheckBox x:Name="autoLineBrackes"  Content="Auto Break" Grid.Column="1" HorizontalAlignment="Left" Height="16" Margin="5,2,0,0" VerticalAlignment="Top" Width="138" IsChecked="True" Style="{DynamicResource DiscreteCheckBoxStyle}"/>
                <TextBlock x:Name="timeinfotextblock" Grid.Column="1" HorizontalAlignment="Left" Height="18" Margin="12,129,0,0"  VerticalAlignment="Top" Width="375" Foreground="{Binding Text, ElementName=timeinfotextblock,Converter={StaticResource ErrorTextToColor}}" TextWrapping="Wrap">
                    <TextBlock.Text>
                        <MultiBinding Converter="{StaticResource OverLapToErrorText}">
                            <Binding ElementName="mainListView" Path="ItemsSource" Mode="OneWay"/>
                            <Binding ElementName="mainListView" Path="SelectedIndex" Mode="OneWay"/>
                            <Binding ElementName="startTimeEditor" Path="Text" Mode="OneWay"/>
                            <Binding ElementName="durationEditor" Path="Text" Mode="OneWay"/>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
                <Border CornerRadius="5" BorderThickness="5" Grid.Column="2" Margin="107,20,10,24" AllowDrop="True">
                    <Border.BorderBrush>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF4E6568" Offset="0"/>
                            <GradientStop Color="#FF18CDEA" Offset="1"/>
                        </LinearGradientBrush>
                    </Border.BorderBrush>
                    <Grid Background="Black">
                        <MediaElement AllowDrop="True" Margin="0,0,0,0" LoadedBehavior="Manual" x:Name="player" ScrubbingEnabled="True" Volume="0"  MediaOpened="player_MediaOpened" UnloadedBehavior="Manual" MediaFailed="player_MediaFailed" Stretch="UniformToFill"/>


                        <Grid Margin="0,0,0,0" x:Name="playerchildren" Background="Transparent" AllowDrop="True" DragOver="playerchildren_DragOver" Drop="playerchildren_Drop" MouseLeftButtonDown="playerchildren_MouseLeftButtonDown">
                            <Slider x:Name="playerslider" Margin="4,0,2,2" Height="18" VerticalAlignment="Bottom"  SmallChange="1" PreviewMouseLeftButtonDown="playerslider_PreviewMouseLeftButtonDown" PreviewMouseLeftButtonUp="playerslider_PreviewMouseLeftButtonUp" Style="{DynamicResource MyCustomStyleForSlider}" />
                            <TextBlock x:Name="playerpositiontextblok" HorizontalAlignment="Left" Height="15" Margin="5,0,0,20" VerticalAlignment="Bottom" Width="44" Foreground="White" Text="00.00.00"/>
                            <TextBlock x:Name="playerlenthtextblock" Margin="0,0,5,20" Text="00.00.00" Height="15" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="44" Foreground="White"/>
                            <Image x:Name="playerImage" Opacity="0" HorizontalAlignment="Left" Width="49" Height="50" VerticalAlignment="Top" Margin="7,7,0,0" >
                                <Image.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                        <GradientStop Color="Black" Offset="0.467"/>
                                        <GradientStop Color="#7FFFFFFF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Image.OpacityMask>
                            </Image>
                            <Grid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem x:Name="openmediamenuitem" Header="Open Media" Click="openmediamenuitem_Click">
                                        <MenuItem.Icon>
                                            <Image Source="/Images/Video.png" Width="18" Height="18"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem x:Name="stopmediamenuitem" Header="Stop" Click="stopmediamenuitem_Click">
                                        <MenuItem.Icon>
                                            <Image Source="/Images/Stop.png" Width="18" Height="18"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem  Header="Stretch" >
                                        <MenuItem.Icon>
                                            <Image Source="/Images/Resize.png" Width="18" Height="18"/>
                                        </MenuItem.Icon>
                                        <RadioButton x:Name="fillmediaradiobutton" Height="18" Content="Fill" Checked="fillmediaradiobutton_Checked" />
                                        <RadioButton x:Name="uniformmediaradiobutton" Height="18" Content="Uniform" IsChecked="True" Checked="uniformmediaradiobutton_Checked"/>
                                    </MenuItem>
                                </ContextMenu>
                            </Grid.ContextMenu>
                        </Grid>
                    </Grid>

                </Border>
                <Slider x:Name="playervolumeslider" Grid.Column="2" Margin="0,0,12,-1" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="96" Maximum="1" LargeChange="0.01" SmallChange="0.01" Value="{Binding Volume, ElementName=player}" Style="{DynamicResource MyCustomStyleForSlider}" Minimum="-1" />
                <Label Content="Vol" Grid.Column="2" Margin="0,0,115,0" Height="24" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="32" Visibility="{Binding Visibility, ElementName=playervolumeslider}"/>
                <CheckBox x:Name="linkwithsubtitle" Content="Link" Grid.Column="2" Height="17" Margin="110,3,0,0" VerticalAlignment="Top" Style="{DynamicResource DiscreteCheckBoxStyle}" IsChecked="True" Unchecked="linkwithsubtitle_Unchecked" HorizontalAlignment="Left" Width="65"/>
                <CheckBox x:Name="autostop" Content="AutoPause" Grid.Column="2" Height="17" Margin="165,3,0,0" VerticalAlignment="Top" Style="{DynamicResource DiscreteCheckBoxStyle}" Checked="autostop_Checked" IsChecked="True" HorizontalAlignment="Left" Width="132"/>

                <!--images that when clicked go to  next line or previous line-->
                <Image x:Name="jumptopreviousimage" Grid.Column="2" Margin="110,0,0,0" Source="/Images/ArrowLeft.png" Height="24" VerticalAlignment="Bottom" MouseLeftButtonDown="jumptopreviousimage_MouseLeftButtonDown" HorizontalAlignment="Left" Width="26"/>
                <Image x:Name="jumptonextimage" Grid.Column="2" Height="24" Margin="143,0,0,0" VerticalAlignment="Bottom" Source="/Images/ArrowRight.png" MouseLeftButtonDown="jumptonextimage_MouseLeftButtonDown" HorizontalAlignment="Left" Width="26"/>
                <Button x:Name="button" Grid.ColumnSpan="2" Content="Button" Grid.Column="1" HorizontalAlignment="Left" Height="38" Margin="413,109,0,0" VerticalAlignment="Top" Width="40" Click="button_Click"/>
            </Grid>
        </Grid>
        <StatusBar x:Name="mainStatusBar" Height="14" VerticalAlignment="Bottom"/>


    </Grid>

    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:Editor_Commands.NormalText}" CanExecute="NormalText_CanExecute" Executed="NoremalText_Execute"  />
        <CommandBinding Command="{x:Static local:Editor_Commands.Marge}" Executed="MargeCommand_Executed" CanExecute="MargeCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.AddLine}" CanExecute="AddLineCommand_CanExecute" Executed="AddLineCommandExecuted"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.InsertLine}" CanExecute="InsetLineCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.InsetLineBeforeCurrentLine}" Executed="InserLineBeforeCurrentLineCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.InsetLineAfterCurrentLine}" Executed="InsertLineAfterCurrentLineCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.DeleteLines}" CanExecute="DeleteLinesCommand_CanExecute" Executed="DeleteLineCommand_Executed"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.TextMenuItemCommand}" CanExecute="TextMenuItemCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.ClearTextCommand}"  Executed="ClearTextCommand_Execute" CanExecute="ClearTextCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.CLearOriginalTextCommand}"  Executed="CLearOriginalTextCommand_Executed" CanExecute="CLearOriginalTextCommand_CanExecute" />
        <CommandBinding Command="{x:Static local:Editor_Commands.CopyTextToClipboard}"  Executed="CopyToClipboardCommand_Execute" CanExecute="CopyToClipboardCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.PasteTextFromClipboardCommand}" CanExecute="PasteTextFromClipboard_CanExecute" Executed="PasteTextFromClipboard_Execute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.SetTextAsOriginalText}"  Executed="SetTextAsOriginalTextCommand_Executed" CanExecute="SetTextAsOriginalTextCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.SetOriginalTextAsTextCommand}" Executed="SetOriginalTextAsTextCommand_Executed" CanExecute="SetOriginalTextAsTextCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.SyncOriginalTextAndText}" Executed="SyncOriginalTextAndText_Executed" CanExecute="SyncOriginalTextAndTextCommand_CanExecute"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.SplitLSelectedLinesCommand}" CanExecute="SplitLSelectedLinesCommand_CanExecute" Executed="SplitLSelectedLinesCommand_Executed"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.BoldTextCommand}" CanExecute="BoldTextCommand_CanExecute" Executed="BoldTextCommand_Executed"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.ItalicTextCommand}" CanExecute="ItalicTextCommand_CanExecute" Executed="ItalicTextCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.UndoCommand}" CanExecute="UndoCommand_CanExecute" Executed="UndoCommand_Execute" />
        <CommandBinding Command="{x:Static local:Editor_Commands.RedoCommand}" CanExecute="RedoCommand_CanExecute" Executed="RedoCommand_Executed"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.SurroundWithTagCommand}" CanExecute="SurroundWithTagCommand_CanExecute" Executed="SurroundWithTagCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.AddSpecialCharacter}" CanExecute="AddSpecialCharacterCommand_CanExecute" Executed="AddSpecialCharacterCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.AddControlCharacterCommand}" CanExecute="AddControlCharacterCommand_CanExecute" Executed="AddControlCharacterCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.SurroundWithSpecialCharCommand}" CanExecute="SurroundWithSpecialCharCommand_CanExecute" Executed="SurroundWithSpecialCharCommand_Executed" />
        <CommandBinding Command="{x:Static local:Editor_Commands.SubtitleAlignmentCommand}" CanExecute="SubtitleAlignMentCommand_CaneExecute" Executed="SubtitleAlignMentCommand_Executed"/>
        <CommandBinding Command="{x:Static local:Editor_Commands.KaroakeEffectCommand}" CanExecute="KaroekeEffectCommand_CanExecute" Executed="KarokeEffectCommand_Execute" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Key="Z" Modifiers="Ctrl" Command="{x:Static local:Editor_Commands.UndoCommand}"/>
        <KeyBinding Key="Y" Modifiers="Ctrl" Command="{x:Static local:Editor_Commands.RedoCommand}"/>
    </Window.InputBindings>
</Window>
